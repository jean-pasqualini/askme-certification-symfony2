category: Dependency Injection
questions:
    -
        question: 'Which line allows to inject the my.custom.service?'
        answers:
            - {value: <argument id="my.custom.service" />,                 correct: false}
            - {value: <argument type="argument" id="my.custom.service" />, correct: false}
            - {value: <argument type="service" id="my.custom.service" />,  correct: true}
            - {value: <service id="my.custom.service" />,                  correct: false}
    -
        question: 'Which types of injection are available in the component?'
        answers:
            - {value: constructor, correct: true}
            - {value: property,    correct: true}
            - {value: method,      correct: true}
            - {value: constant,    correct: false}
    -
        question: 'Using XML, which of these lines are correct to inject a service?'
        answers:
            - {value: <service id="my.service" />,                                                      correct: false}
            - {value: <argument type="service" id="my.service" />,                                      correct: true}
            - {value: <method setter="setService"><argument type="service" id="my.service" /></method>, correct: false}
            - {value: <call method="setService"><argument type="service" id="my.service" /></call>,     correct: true}
    -
        question: 'Which of these methods are available in ContainerInterface?'
        answers:
            - {value: setScope($name),   correct: false}
            - {value: getScope($name),   correct: false}
            - {value: addScope($name),   correct: true}
            - {value: enterScope($name), correct: true}
    -
        question: 'Using YML, which line allows to inject proxy of the service?'
        answers:
            - {value: "proxy_service: true", correct: false}
            - {value: "lazy: true",          correct: true}
            - {value: "proxy: enabled",      correct: false}
            - {value: "proxy: true",         correct: false}
    -
        question: 'Which method from CompilerPassInterface can modify the container here before it is dumped to PHP code?'
        answers:
            - {value: modify(),             correct: false}
            - {value: processContainer(),   correct: false}
            - {value: process(),            correct: true}
            - {value: modifyContainer(),    correct: false}
    -
        question: 'Using Dependency Injection, what is the correct way to override a service class using ContainerBuilder class?'
        answers:
            - {value: "$container->getDefinition('my.service')->setClass('My\Service\Class')",   correct: true}
            - {value: "$container->getService('my.service')->setDefinition('My\Service\Class')", correct: false}
            - {value: "$container->getDefinition('my.service')->setService('My\Service\Class')", correct: false}
            - {value: "$container->getService('my.service')->setClass('My\Service\Class')",      correct: false}
    -
        question: 'Using a compiler pass, how do you retrieve a definition of service ?'
        answers:
            - {value: "$container->getDefinition('my.service')",        correct: true}
            - {value: "$container->findDefinition('my.service')",       correct: true}
            - {value: "$container->retrieveDefinition('my.service')",   correct: false}
            - {value: "$container->getService('my.service')",           correct: false}
    -
        question: 'What are existing pass order ?'
        answers:
            - {value: "PassConfig::TYPE_BEFORE_OPTIMIZATION", correct: true}
            - {value: "PassConfig::TYPE_OPTIMIZE",            correct: true}
            - {value: "PassConfig::TYPE_BEFORE_REMOVING",     correct: true}
            - {value: "PassConfig::TYPE_REMOVE",              correct: true}
            - {value: "PassConfig::TYPE_AFTER_COMPILING",     correct: false}
    -
        question: "As dev environment, what is the name of dumped container ?"
        answers:
            - {value: "appDevDebugProjectContainer.php",    correct: true}
            - {value: "appDevProjectContainer.php",         correct: false}
            - {value: "appDevDebugProjectServiceContainer", correct: false}
            - {value: "appDevDebugContainer",               correct: false}
